import {init} from './gojs/lib.js';

let t = document.getElementById('t');
let plus_more_tables = document.getElementById('plus_more_tables');
let clear_all_tables = document.getElementById('clear_all_tables');
let submit_form = document.getElementById('submit');

let x = 0;
let y = 0;
let z =0;

plus_more_tables.onclick = function(){

	/*
	adds another table div tag "object" to the html
	each table "object" is nested under <div id="t">,
	and has a hierarchy of div objects (tables -> columns -> relations).

	structure (where x is incremented by 1 on each click):
	<div id="table_x">
		<input type="text" place_holder="Table Name">
		<button id="remove_table" class=x>Remove Table<button>
			<div id="columns_x>
				<button id="add_column">Add Column</button>
				(column divs generated by the add_column button)
			</div>
	</div>
	*/

	x = x + 1;

	let index = x.toString();
	let newDiv = document.createElement("div");
	newDiv.setAttribute('id', 'table_'+index);

	let newInput = document.createElement('input');
	newInput.setAttribute('type','text');
	newInput.setAttribute('siz',50);
	newInput.setAttribute('placeholder','Table Name');

	let newRemoveButton = document.createElement('button');
	newRemoveButton.setAttribute('id', 'remove_table');
	newRemoveButton.setAttribute('class' , index);
	newRemoveButton.innerHTML += 'Remove Table';

	newRemoveButton.onclick = function(){
		let index = this.className;
		let childToRemove = document.getElementById('table_'+index);
		t.removeChild(childToRemove);
	}

	// column
	let columnsDiv = document.createElement("div");
	columnsDiv.setAttribute('id', 'columns_'+index);
	// columnsDiv.setAttribute('class', 'columnsDiv');
	let newColumnButton = document.createElement('button');
	newColumnButton.setAttribute('id', 'add_column');
	newColumnButton.innerHTML += 'Add Column';

	newColumnButton.onclick = function () {

	/*  adds another column div tag "object" to the html
		each column "object" is nested under <div id="columns_x">,
		and has a hierarchy of div objects (columns -> relations).

		structure (where y is incremented by 1 on each click):
		<div id="columns_x_y">
			<input type="text" place_holder="Column Name">
			<button id="remove_column" class=x_y><button>
				<div id="relationships_x_y>
					<button id="add_relation">Add Relationship</button>
					(relationship divs generated by the add_relation button)
				</div>
		</div>
	 */

		y = y + 1;
		let columnIndex = index + '_' + y.toString();
		let newDiv = document.createElement("div");
		let newInput = document.createElement('input');
		let newCheckbox = document.createElement('input');

			newCheckbox.setAttribute('type', 'checkbox');
			newCheckbox.setAttribute('id', 'is_key');
			newCheckbox.setAttribute('class', 'is_key_' + columnIndex);
			newCheckbox.setAttribute('title', 'Set as a Table Key');

		let newRemoveButton = document.createElement('button')
		let parentTable = columnsDiv
		newDiv.setAttribute('id', 'columns_'+columnIndex);
		newDiv.setAttribute('class', 'columnsDiv');

		newInput.setAttribute('id', 'column_'+columnIndex);
		newInput.setAttribute('type','text');
		newInput.setAttribute('class','columns_'+columnIndex);
		newInput.setAttribute('siz',50);
		newInput.setAttribute('placeholder','Column Name');

		newRemoveButton.setAttribute('id', 'remove_column');
		newRemoveButton.setAttribute('class' , columnIndex);

		newRemoveButton.onclick = function(){
			let columnIndex = this.className;
			let childToRemove = document.getElementById('columns_'+columnIndex);
			childToRemove.remove();
		}

		// relationship
		let relationsDiv = document.createElement("div");
		relationsDiv.setAttribute('id', 'relationships_'+columnIndex);
		let newRelationButton = document.createElement('button');
		newRelationButton.setAttribute('id', 'add_relation');
		newRelationButton.innerHTML += 'Add Relationship';
		newRelationButton.onclick = function () {

			/*  adds another relationship div tag "object" to the html
				each relationship "object" is nested under <div id="relationships_z">.

				structure (where z is incremented by 1 on each click):
				<div id="relations_x_y_z">
					<input type="text" place_holder="Connect To Table">
					<input type="text" place_holder="Connect To Column">
					<button id="remove_relation" class=x_y_z><button>
				</div>
			 */

			z = z + 1;
			let relationIndex = columnIndex + '_' + z.toString();
			let newDiv = document.createElement("div");
			let newInput = document.createElement('input');
			let newInputFrom = document.createElement('input');

			let RemoveRelationButton = document.createElement('button')
			let parentTable = relationsDiv
			newDiv.setAttribute('id', 'relations_'+relationIndex);
			newInputFrom.setAttribute('id', 'table_relation_'+relationIndex)
			newInputFrom.setAttribute('id', 'relation_'+relationIndex);
			newInputFrom.setAttribute('type','text');
			newInputFrom.setAttribute('class','relation_'+relationIndex);
			newInputFrom.setAttribute('siz',50);
			newInputFrom.setAttribute('placeholder','Connect To Table');

			newInput.setAttribute('id', 'relation_'+relationIndex);
			newInput.setAttribute('type','text');
			newInput.setAttribute('class','relation_'+relationIndex);
			newInput.setAttribute('siz',50);
			newInput.setAttribute('placeholder','Connect To Column');

			RemoveRelationButton.setAttribute('id', 'remove_relation');
			RemoveRelationButton.setAttribute('class' , relationIndex);

			RemoveRelationButton.onclick = function(){
				let relationIndex = this.className;
				let childToRemove = document.getElementById('relations_'+relationIndex);
				childToRemove.remove();
			}

			newDiv.appendChild(newInputFrom);
			newDiv.appendChild(newInput);
			newDiv.appendChild(RemoveRelationButton);
			parentTable.appendChild(newDiv);
		}
		relationsDiv.appendChild(newRelationButton)

		newDiv.appendChild(newCheckbox);
		newDiv.appendChild(newInput);
		newDiv.appendChild(newRemoveButton);
		newDiv.appendChild(relationsDiv);
		parentTable.appendChild(newDiv);
	}

	// appends
	newDiv.appendChild(newInput);
	newDiv.appendChild(newRemoveButton);
	columnsDiv.appendChild(newColumnButton);
	newDiv.appendChild(columnsDiv);

	t.appendChild(newDiv);
}


let initSession = function (){
	// Gets the previous nodes & relationships objects from the sessionsStorage

	let lastSession = [JSON.parse(sessionStorage.getItem('nodes')), JSON.parse(sessionStorage.getItem('relations'))]
	if (lastSession[0]===null || lastSession[0][0]===undefined){
		lastSession	= [[],[]]
		plus_more_tables.click()
	}
	return lastSession;
}




submit_form.onclick = function() {
	/*
	Gets all html tags under <div id="t">,
	parses and creates nodes & relationships JSON objects.
	stores the objects in sessionStorage for later use,
	and initiates the go.js diagram builder.
	 */

	let tableDivs = t.querySelectorAll("[id^='table_']");
	nodes = []
	relationItems = []
	for (let table of tableDivs) {
		let tableName = table.firstChild.value;
		let columnDivs = table.children.item(2).querySelectorAll("[id^='columns_']");
		let columnItems = [];
		for (let column of columnDivs) {
			column.children[0].nodeValue
			let columnFigure = "LineH";
			if (column.firstChild.checked === true) { columnFigure = 'Key' }
			let columnItem = {name:column.children['1'].value, info: '', color: 'black', figure: columnFigure};
			columnItems.push(columnItem);

			let relationDivs = column.querySelectorAll("[id^='relations_']");
			for (let relation of relationDivs) {
				let relationItem = { from: tableName, fromPort: column.children['1'].value, to: relation.firstChild.value, toPort: relation.children[1].value };
			relationItems.push(relationItem);
			}

		}

		let node = {key: tableName ,fields: columnItems};
		nodes.push(node);

	}

	// Re-assign nodes locations (so that the locations wont be reset)
	let prevDiagram = go.Diagram.fromDiv('myDiagramDiv');
	if (prevDiagram !== null) {
		let locArray = prevDiagram.model['Fc'];
		for (let x of locArray) {
			for (let y of nodes) {
				if (x.key === y.key) {
					y.loc=x.loc;
				}
			}
		}
	}

	// Save config objects
	sessionStorage.setItem('nodes', JSON.stringify(nodes));
	sessionStorage.setItem('relations', JSON.stringify(relationItems));

	// Create gojs diagram
	init()

};


clear_all_tables.onclick = function (){
	/*
	clears all the tags nested under <div id="t">
	this removes all the tables and re-submits the form.
	*/

	while (t.firstChild) {
		t.removeChild(t.lastChild);
	  }
	submit_form.click()
}

let downloadButton = document.getElementById('download');
downloadButton.onclick = function () {
	/*
	submits the current form,
	and downloads a file containing a json of the diagram configurations.
	 */

	submit_form.click()
	var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify({'n': nodes, 'r': relationItems}));
	downloadButton.setAttribute("href", dataStr);
}

let uploadButton = document.getElementById('upload');
uploadButton.onclick = function () {
	/*
	 upload a file containing a JSON of a diagram configurations,
	 and rebuilds the form and the diagram according to the configurations on the file.
	 */
	let uploadInput = document.createElement('input');
	uploadInput.setAttribute('id','uploadInput');
	uploadInput.setAttribute('type', 'file');
	uploadInput.click();

	let Continue = async function () {
		clear_all_tables.click();
		let fileContent = JSON.parse(await uploadInput.files.item(0).text());
		nodes = fileContent['n'];
		relationItems = fileContent['r'];
		formFromObject(nodes, relationItems);
		sessionStorage.setItem('nodes', JSON.stringify(nodes));
		sessionStorage.setItem('relations', JSON.stringify(relationItems));
		init();
	}

	uploadInput.addEventListener('input', Continue);

}


let formFromObject = function (nodesObject, relationItemsObject){

	// Parses a configurations JSON, and rebuilds a form on the left menu accordingly.

	for (let n of nodesObject) {
		plus_more_tables.click()
		let tableDiv = t.children[t.childElementCount-1]
		let table = tableDiv.firstChild
		let tableName = n['key']
		table.value = tableName


		for (let f of n['fields']){
			tableDiv.children[2].firstChild.click()
			let columnDiv = tableDiv.children[2].children[tableDiv.children[2].childElementCount-1]
			let columnName = f['name']
			if (f['figure']==='Key') {columnDiv.firstChild.checked = true}
			columnDiv.children[1].value = columnName;

			for (let r of relationItemsObject){
				if (r['from']===tableName && r['fromPort']===columnName) {
					let relationDivs = columnDiv.children[3]
					relationDivs.firstChild.click()
					let relationDiv = relationDivs.children[relationDivs.childElementCount - 1]

					relationDiv.children[0].value = r['to']
					relationDiv.children[1].value = r['toPort']
				}
			}
		}
	}
}

let [nodes, relationItems] = initSession();
formFromObject(nodes, relationItems);

export {nodes, relationItems};
